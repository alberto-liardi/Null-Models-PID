%% MAXIMUM REDUNDANCY SYSTEM
% X=Y+small white noise
% Therefore Unique = 0; Redundancy = MIx = MIy, Syn = MI-Red

rng('default') % for reproducibility of random variables
disp("begin run");

max_mord = 1;

x = 1:100;
X = 0.5*x + normrnd(0,1,1,100);
Y = X+normrnd(0,0.001,1,100);
Z = [X;Y];

% fitness procedure
[A,p,V,~] = EvolCoefFit(Z, max_mord, false);

PID= PIDcalc_Mult(p,A,V,1,1,"joint",['y','n','n']);
Red = PID(1,3);   MI = sum(PID(1,:));

null_PIDs = MI_null_model_VAR(MI);
null_Reds = null_PIDs(3,:);

figure();
histogram(null_Reds);
hold on
xline(Red,'--', 'LineWidth', 2, 'Color', 'black');

xlabel('Redundancies');
ylabel('Counts');
title("Redundancy distribution for MI = "+num2str(MI));
legend('Red', "MAX = "+sprintf('%.2f',Red));

disp("end of execution");


%% MAXIMUM UNIQUE SYSTEM

rng('default') % for reproducibility of random variables
disp("begin run");

max_mord = 1;

x = 1:100;
X = 0.5*x + normrnd(0,1,1,100);
Y = normrnd(0,1,1,100);

Z = [X;Y];

% fitness procedure
[A,p,V,~] = EvolCoefFit(Z, max_mord, false);

PID= PIDcalc_Mult(p,A,V,1,1,"joint",['y','n','n']);
Un = max(PID(1,1), PID(1,2));   MI = sum(PID(1,:));

null_PIDs = MI_null_model_VAR(MI);
null_Uns = null_PIDs(1,:)+null_PIDs(2,:);

figure();
histogram(null_Uns);
hold on
xline(Un,'--', 'LineWidth', 2, 'Color', 'black');

xlabel('Unique');
ylabel('Counts');
title("Unique distribution for MI = "+num2str(MI));
legend('Un', "MAX = "+sprintf('%.2f',Un));

disp("end of execution");

%% MAXIMAL SYNERGISTIC SYSTEM

max_mord = 1;

% A = [-3 3.1; -3 3.1];
a = 0.5+rand(1)*20;
A = [-a a+0.1; -a a+0.1];

V = eye(2);
PID= PIDcalc_Mult(p,{A},V,1,1,"joint",['y','n','n']);
Syn = PID(1,4);   MI = sum(PID(1,:));

null_PIDs = MI_null_model_VAR(MI);
null_Syns = null_PIDs(4,:);

figure();
histogram(null_Syns);
hold on
xline(Syn,'--', 'LineWidth', 2, 'Color', 'black');

xlabel('Synergy');
ylabel('Counts');
title("Synergy distribution for MI = "+num2str(MI));
legend('Sy', "MAX = "+sprintf('%.2f',Un));

disp("end of execution");


%% XOR v2

X = [0]; Y = [3];
for i = 2:100

    if (X(end) == Y(end))
        if (mod(X(end),2)==0 && mod(Y(end),2)==0) %|| (mod(X(end),2)==1 && mod(Y(end),2)==1)
            X(end+1) = X(end)+1;
            Y(end+1) = Y(end);
        else
            Y(end+1) = Y(end)+1;
            X(end+1) = X(end);
        end
    else
        if (rand(1)<0.5)
            X(end+1) = X(end)+1;
            Y(end+1) = Y(end);
        else 
            Y(end+1) = Y(end)+1;
            X(end+1) = X(end);
        end
    end
end
Z = [X;Y];

% fitness procedure
[A,p,V,~] = EvolCoefFit(Z, 10, false);

PID= PIDcalc_Mult(p,A,V,1,1,"joint",['y','n','n']);
UnX = PID(1,1);   UnY = PID(1,2);
Red = PID(1,3);   Syn = PID(1,4);
MI = sum(PID(1,:));

disp(PID);



%% general var(1) model
disp("run");

syms a b c a11 a12 a21 a22 d e f
V = eye(2);
A = [a11 a12; a11 a12];
Sigma = [a b; b c];
sol = solve(A*Sigma*(A.')+V == Sigma,[a b c],'ReturnConditions', true, 'IgnoreAnalyticConstraints', true);
disp(sol)

d = sol.a; e = sol.b; f = sol.c; 
SigmaT = [d e; e f];
Gamma1 = A*Sigma;

SigmaX = d; SigmaY = e; SigmaXY = f;
SigmaS = SigmaT; Sigma_full = [SigmaT Gamma1; Gamma1 SigmaS];
SigmaXT = [SigmaX Gamma1(1,1); Gamma1(1,1) SigmaX];
SigmaYT = [SigmaY Gamma1(2,2); Gamma1(2,2) SigmaY];

MI = 0.5*log(det(SigmaT))+0.5*log(det(SigmaS))-0.5*log(det(Sigma_full));
MIx = 0.5*log(det(SigmaX))+0.5*log(det(SigmaT))-0.5*log(det(SigmaXT));
MIy = 0.5*log(det(SigmaY))+0.5*log(det(SigmaT))-0.5*log(det(SigmaYT));

Red = min(MIx, MIy);
if Red == MIx
    UnX = 0;
else
    Uny = 0;
end
Syn = MI - max(MIx,MIy);

fun = matlabFunction(Syn);

disp("end");

%% trash (old synergy stuff for non-believers)

% A = [1 1.01; -1 1.01];
%     PID = PIDcalc_Mult(1,{A},eye(2),1,1,"joint",['y','n','n']);
%     UnX = PID(1,1);   UnY = PID(1,2);
%     Red = PID(1,3);   Syn = PID(1,4);
%     MI = sum(PID(1,:));
%     disp("pre"); PID

X(1,1) = 1; Y(1,1) = 1;
Z = [2;2];
for i = 2:100
    eps = normrnd(0,1);
    chi = normrnd(0,1);
    Z(1:2, i) = A*Z(1:2,i-1) + [eps, chi]'; 
end

[A,p,V,~] = EvolCoefFit(Z, max_mord, false);